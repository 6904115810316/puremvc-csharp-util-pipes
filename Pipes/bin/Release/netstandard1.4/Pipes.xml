<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Pipes</name>
    </assembly>
    <members>
        <member name="T:Pipes.Interfaces.IPipeAware">
            <summary>
            Pipe Aware interface.
            </summary>
            <remarks>
                <para>
                    Can be implemented by any PureMVC Core that wishes
                    to communicate with other Cores using the Pipes
                    utility.
                </para>
            </remarks>
        </member>
        <member name="M:Pipes.Interfaces.IPipeAware.AcceptInputPipe(System.String,Pipes.Interfaces.IPipeFitting)">
            <summary>
            Connect input Pipe Fitting.
            </summary>
            <param name="name">name of the input pipe</param>
            <param name="pipe">input Pipe Fitting</param>
        </member>
        <member name="M:Pipes.Interfaces.IPipeAware.AcceptOutputPipe(System.String,Pipes.Interfaces.IPipeFitting)">
            <summary>
            Connect output Pipe Fitting.
            </summary>
            <param name="name">name of the input pipe</param>
            <param name="pipe">output Pipe Fitting</param>
        </member>
        <member name="T:Pipes.Interfaces.IPipeFitting">
            <summary>
            Pipe Fitting Interface.
            </summary>
            <remarks>
                <para>
                    An `IPipeFitting` can be connected to other
                    `IPipeFittings`, forming a Pipeline.
                    `IPipeMessages` are written to one end of a
                    Pipeline by some client code. The messages are then
                    transfered in synchronous fashion from one fitting to the next.
                </para>
            </remarks>
        </member>
        <member name="M:Pipes.Interfaces.IPipeFitting.Connect(Pipes.Interfaces.IPipeFitting)">
            <summary>
            Connect another Pipe Fitting to the output.
            other fittings in a one way syncrhonous 
            chain, as water typically flows one direction 
            through a physical pipe.
            </summary>
            <remarks>
                <para>
                    Fittings connect and write to
                </para>
            </remarks>
            <param name="output"></param>
            <returns>Boolean true if no other fitting was already connected.</returns>
        </member>
        <member name="M:Pipes.Interfaces.IPipeFitting.Disconnect">
            <summary>
            Disconnect the Pipe Fitting connected to the output.
            </summary>
            <remarks>
                <para>
                    This disconnects the output fitting, returning a
                    reference to it. If you were splicing another fitting 
                    into a pipeline, you need to keep (at least briefly) 
                    a reference to both sides of the pipeline in order to 
                    connect them to the input and output of whatever 
                    fiting that you're splicing in.
                </para>
            </remarks>
            <returns>IPipeFitting the now disconnected output fitting</returns>
        </member>
        <member name="M:Pipes.Interfaces.IPipeFitting.Write(Pipes.Interfaces.IPipeMessage)">
            <summary>
            Write the message to the output Pipe Fitting.
            </summary>
            <remarks>
                <para>
                    There may be subsequent filters and tees 
                    (which also implement this interface), that the 
                    fitting is writing to, and so a message 
                    may branch and arrive in different forms at 
                    different endpoints.
                </para>
                <para>
                    If any fitting in the chain returns false 
                    from this method, then the client who originally 
                    wrote into the pipe can take action, such as 
                    rolling back changes.
                </para>
            </remarks>
            <param name="message">message to write</param>
            <returns>Boolean true if write was successful</returns>
        </member>
        <member name="T:Pipes.Interfaces.IPipeMessage">
            <summary>
            Pipe Message Interface.
            </summary>
            <remarks>
                <para>
                    <c>IPipeMessage</c>s are objects written intoto a Pipeline,
                    composed of <c>IPipeFitting</c>s. The message is passed from 
                    one fitting to the next in syncrhonous fashion.
                </para>
                <para>
                    Depending on type, messages may be handled differently by the 
                    fittings.
                </para>
            </remarks>
        </member>
        <member name="P:Pipes.Interfaces.IPipeMessage.Type">
            <summary>Get or set type of this message</summary>
        </member>
        <member name="P:Pipes.Interfaces.IPipeMessage.Header">
            <summary>Get or set header of this message</summary>
        </member>
        <member name="P:Pipes.Interfaces.IPipeMessage.Priority">
            <summary>Get or set priority of this message</summary>
        </member>
        <member name="P:Pipes.Interfaces.IPipeMessage.Body">
            <summary>Get or set body of this message</summary>
        </member>
        <member name="T:Pipes.Messages.FilterControlMessage">
            <summary>
            Filter Control Message.
            </summary>
            <remarks>
                <para>
                    A special message type for controlling the behavior of a Filter.
                </para>
                <para>
                    The <c>FilterControlMessage.SET_PARAMS</c> message type tells the Filter
                    to retrieve the filter parameters object.
                </para>
                <para>
                    The <c>FilterControlMessage.SET_FILTER</c> message type tells the Filter
                    to retrieve the filter function.
                </para>
                <para>
                    The <c>FilterControlMessage.BYPASS</c> message type tells the Filter
                    that it should go into Bypass mode operation, passing all normal
                    messages through unfiltered.
                </para>
                <para>
                    The <c>FilterControlMessage.FILTER</c> message type tells the Filter
                    that it should go into Filtering mode operation, filtering all
                    normal normal messages before writing out. This is the default
                    mode of operation and so this message type need only be sent to
                    cancel a previous <c>FilterControlMessage.BYPASS</c> message.
                </para>
                <para>
                    The Filter only acts on a control message if it is targeted 
                    to this named filter instance. Otherwise it writes the message
                    through to its output unchanged.
                </para>
            </remarks>
        </member>
        <member name="F:Pipes.Messages.FilterControlMessage.SET_PARAMS">
            <summary>Set filter parameters.</summary>
        </member>
        <member name="F:Pipes.Messages.FilterControlMessage.SET_FILTER">
            <summary>Set filter function.</summary>
        </member>
        <member name="F:Pipes.Messages.FilterControlMessage.BYPASS">
            <summary>Toggle to filter bypass mode.</summary>
        </member>
        <member name="F:Pipes.Messages.FilterControlMessage.FILTER">
            <summary>Toggle to filtering mode. (default behavior).</summary>
        </member>
        <member name="M:Pipes.Messages.FilterControlMessage.#ctor(System.String,System.String,System.Func{Pipes.Interfaces.IPipeMessage,System.Object,System.Boolean},System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="type"></param>
            <param name="name"></param>
            <param name="filter"></param>
            <param name="_params"></param>
        </member>
        <member name="P:Pipes.Messages.FilterControlMessage.Name">
            <summary>Get or Set the target filter name.</summary>
        </member>
        <member name="P:Pipes.Messages.FilterControlMessage.Filter">
            <summary>Get or Set the filter function.</summary>
        </member>
        <member name="P:Pipes.Messages.FilterControlMessage.Params">
            <summary>Get or Set the parameters object.</summary>
        </member>
        <member name="T:Pipes.Messages.Message">
            <summary>
            Pipe Message.
            </summary>
            <remarks>
                <para>
                    Messages travelling through a Pipeline can
                    be filtered, and queued. In a queue, they may
                    be sorted by priority. Based on type, they 
                    may used as control messages to modify the
                    behavior of filter or queue fittings connected
                    to the pipleline into which they are written.
                </para>
            </remarks>
        </member>
        <member name="F:Pipes.Messages.Message.PRIORITY_HIGH">
            <summary>High priority Messages can be sorted to the front of the queue</summary>
        </member>
        <member name="F:Pipes.Messages.Message.PRIORITY_MED">
            <summary>Medium priority Messages are the default</summary>
        </member>
        <member name="F:Pipes.Messages.Message.PRIORITY_LOW">
            <summary>Low priority Messages can be sorted to the back of the queue</summary>
        </member>
        <member name="F:Pipes.Messages.Message.NORMAL">
            <summary>Normal Message type.</summary>
        </member>
        <member name="M:Pipes.Messages.Message.#ctor(System.String,System.Object,System.Object,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="type"></param>
            <param name="header"></param>
            <param name="body"></param>
            <param name="priority"></param>
        </member>
        <member name="P:Pipes.Messages.Message.Type">
            <summary>Get or Set the type of this message</summary>
        </member>
        <member name="P:Pipes.Messages.Message.Header">
            <summary>Get or Set the header of this message</summary>
        </member>
        <member name="P:Pipes.Messages.Message.Priority">
            <summary>Get or Set the priority of this message</summary>
        </member>
        <member name="P:Pipes.Messages.Message.Body">
            <summary>Get or Set the body of this message</summary>
        </member>
        <member name="T:Pipes.Messages.QueueControlMessage">
            <summary>
            Queue Control Message.
            </summary>
            <remarks>
                <para>
                    A special message for controlling the behavior of a Queue.
                </para>
                <para>
                    When written to a pipeline containing a Queue, the type
                    of the message is interpreted and acted upon by the Queue.
                </para>
                <para>
                    Unlike filters, multiple serially connected queues aren't 
                    very useful and so they do not require a name. If multiple
                    queues are connected serially, the message will be acted 
                    upon by the first queue only
                </para>
            </remarks>
        </member>
        <member name="F:Pipes.Messages.QueueControlMessage.FLUSH">
            <summary>Flush the queue.</summary>
        </member>
        <member name="F:Pipes.Messages.QueueControlMessage.SORT">
            <summary>Toggle to sort-by-priority operation mode.</summary>
        </member>
        <member name="F:Pipes.Messages.QueueControlMessage.FIFO">
            <summary>Toggle to FIFO operation mode (default behavior).</summary>
        </member>
        <member name="M:Pipes.Messages.QueueControlMessage.#ctor(System.String)">
            <summary>Constructor</summary>
        </member>
        <member name="T:Pipes.Plumbing.Filter">
            <summary>
            Pipe Filter.
            </summary>
            <remarks>
                <para>
                    Filters may modify the contents of messages before writing them to 
                    their output pipe fitting. They may also have their parameters and
                    filter function passed to them by control message, as well as having
                    their Bypass/Filter operation mode toggled via control message.
                </para>
            </remarks>
        </member>
        <member name="M:Pipes.Plumbing.Filter.#ctor(System.String,Pipes.Interfaces.IPipeFitting,System.Func{Pipes.Interfaces.IPipeMessage,System.Object,System.Boolean},System.Object)">
            <summary>
            Constructor.
            </summary>
            <param name="name">Name of the filter</param>
            <param name="output">Output pipe</param>
            <param name="filter">Filter function</param>
            <param name="params">Filter function parameters</param>
        </member>
        <member name="M:Pipes.Plumbing.Filter.Write(Pipes.Interfaces.IPipeMessage)">
            <summary>
            Handle the incoming message.
            </summary>
            <remarks>
                <para>
                    If message type is normal, filter the message (unless in BYPASS mode)
                    and write the result to the output pipe fitting if the filter 
                    operation is successful.
                </para>
                <para>
                    The FilterControlMessage.SET_PARAMS message type tells the Filter
                    that the message class is FilterControlMessage, which it 
                    casts the message to in order to retrieve the filter parameters
                    object if the message is addressed to this filter.
                </para>
                <para>
                    The FilterControlMessage.SET_FILTER message type tells the Filter
                    that the message class is FilterControlMessage, which it 
                    casts the message to in order to retrieve the filter function.
                </para>
                <para>
                    The FilterControlMessage.BYPASS message type tells the Filter
                    that it should go into Bypass mode operation, passing all normal
                    messages through unfiltered.
                </para>
                <para>
                    The FilterControlMessage.FILTER message type tells the Filter
                    that it should go into Filtering mode operation, filtering all
                    normal normal messages before writing out. This is the default
                    mode of operation and so this message type need only be sent to
                    cancel a previous BYPASS message.
                </para>
                <para>
                    The Filter only acts on the control message if it is targeted 
                    to this named filter instance. Otherwise it writes through to the
                    output.
                </para>
            </remarks>
            <param name="message"></param>
            <returns>Boolean True if the filter process does not throw an error and subsequent operations in the pipeline succede.</returns>
        </member>
        <member name="M:Pipes.Plumbing.Filter.IsTarget(Pipes.Interfaces.IPipeMessage)">
            <summary>
            Is the message directed at this filter instance?
            </summary>
            <param name="message">message</param>
            <returns></returns>
        </member>
        <member name="M:Pipes.Plumbing.Filter.ApplyFilter(Pipes.Interfaces.IPipeMessage)">
            <summary>
            Filter the message.
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Pipes.Plumbing.Filter.SetParams(System.Object)">
            <summary>
            Set the Filter parameters.
            </summary>
            <remarks>
                <para>
                    This can be an object can contain whatever arbitrary 
                    properties and values your filter method requires to
                    operate.
                </para>
            </remarks>
            <param name="params">the parameters object</param>
        </member>
        <member name="M:Pipes.Plumbing.Filter.SetFilter(System.Func{Pipes.Interfaces.IPipeMessage,System.Object,System.Boolean})">
            <summary>
            Set the Filter function.
            </summary>
            <remarks>
                It must accept an Action receiveing two arguments; 
                an IPipeMessage, and a parameter Object, which can 
                contain whatever arbitrary properties and values your 
                filter method requires.
            </remarks>
            <param name="value"></param>
        </member>
        <member name="P:Pipes.Plumbing.Filter.Mode">
            <summary>Get or set the Filter mode</summary>
        </member>
        <member name="F:Pipes.Plumbing.Filter.mode">
            <summary>mode of the filter, default is <c>FilterControlMessage.FILTER</c></summary>
        </member>
        <member name="F:Pipes.Plumbing.Filter.name">
            <summary> name of the filter</summary>
        </member>
        <member name="F:Pipes.Plumbing.Filter.filter">
            <summary>filter function</summary>
        </member>
        <member name="F:Pipes.Plumbing.Filter.params">
            <summary> parameters for the filter message</summary>
        </member>
        <member name="T:Pipes.Plumbing.Junction">
            <summary>
            Pipe Junction.
            </summary>
            <remarks>
                <para>
                    Manages Pipes for a Module. 
                </para>
                <para>
                    When you register a Pipe with a Junction, it is 
                    declared as being an INPUT pipe or an OUTPUT pipe.
                </para>
                <para>
                    You can retrieve or remove a registered Pipe by name, 
                    check to see if a Pipe with a given name exists,or if 
                    it exists AND is an INPUT or an OUTPUT Pipe.
                </para>
                <para>
                    You can send an <c>IPipeMessage</c> on a named INPUT Pipe 
                    or add a <c>PipeListener</c> to registered INPUT Pipe.
                </para>
            </remarks>
        </member>
        <member name="M:Pipes.Plumbing.Junction.#ctor">
            <summary>
            Constructor. 
            </summary>
        </member>
        <member name="M:Pipes.Plumbing.Junction.RegisterPipe(System.String,System.String,Pipes.Interfaces.IPipeFitting)">
            <summary>
            Register a pipe with the junction.
            </summary>
            <remarks>
                <para>
                    Pipes are registered by unique name and type,
                    which must be either <c>Junction.INPUT</c>
                    or <c>Junction.OUTPUT</c>.
                </para>
                <para>
                    NOTE: You cannot have an INPUT pipe and an OUTPUT
                    pipe registered with the same name. All pipe names
                    must be unique regardless of type.
                </para>
            </remarks>
            <param name="name">name of the pipe</param>
            <param name="type">type (INPUT/OUTPUT) of the pipe</param>
            <param name="pipe">Pipefitting</param>
            <returns>true if successfully registered. false if another pipe exists by that name.</returns>
        </member>
        <member name="M:Pipes.Plumbing.Junction.HasPipe(System.String)">
            <summary>
            Does this junction have a pipe by this name?
            </summary>
            <param name="name">name the pipe to check for</param>
            <returns>Boolean whether as pipe is registered with that name.</returns>
        </member>
        <member name="M:Pipes.Plumbing.Junction.HasInputPipe(System.String)">
            <summary>
            Does this junction have an INPUT pipe by this name?
            </summary>
            <param name="name">name the pipe to check for </param>
            <returns>Boolean whether an INPUT pipe is registered with that name.</returns>
        </member>
        <member name="M:Pipes.Plumbing.Junction.HasOutputPipe(System.String)">
            <summary>
            Does this junction have an OUTPUT pipe by this name?
            </summary>
            <param name="name">name the pipe to check for </param>
            <returns>Boolean whether an OUTPUT pipe is registered with that name.</returns>
        </member>
        <member name="M:Pipes.Plumbing.Junction.RemovePipe(System.String)">
            <summary>
            Remove the pipe with this name if it is registered.
            </summary>
            <remarks>
                <para>
                    NOTE: You cannot have an INPUT pipe and an OUTPUT
                    pipe registered with the same name. All pipe names
                    must be unique regardless of type.
                </para>
            </remarks>
            <param name="name">name the pipe to remove</param>
        </member>
        <member name="M:Pipes.Plumbing.Junction.RetrievePipe(System.String)">
            <summary>
            Retrieve the named pipe.
            </summary>
            <param name="name">name the pipe to retrieve</param>
            <returns>IPipeFitting the pipe registered by the given name if it exists</returns>
        </member>
        <member name="M:Pipes.Plumbing.Junction.AddPipeListener(System.String,System.Object,System.Action{Pipes.Interfaces.IPipeMessage})">
            <summary>
            Add a PipeListener to an INPUT pipe.
            </summary>
            <remarks>
                <para>
                    NOTE: there can only be one PipeListener per pipe,
                    and the listener function must accept an IPipeMessage
                    as its sole argument.
                </para>
            </remarks>
            <param name="inputPipeName">name the INPUT pipe to add a PipeListener to</param>
            <param name="context">context the calling context or 'this' object </param>
            <param name="listener">listener the function on the context to call</param>
            <returns></returns>
        </member>
        <member name="M:Pipes.Plumbing.Junction.SendMessage(System.String,Pipes.Interfaces.IPipeMessage)">
            <summary>
            Send a message on an OUTPUT pipe.
            </summary>
            <param name="outputPipeName">name the OUTPUT pipe to send the message on</param>
            <param name="message">message the IPipeMessage to send  </param>
            <returns>Boolean true if message was sent successfully</returns>
        </member>
        <member name="F:Pipes.Plumbing.Junction.INPUT">
            <summary>INPUT Pipe Type</summary>
        </member>
        <member name="F:Pipes.Plumbing.Junction.OUTPUT">
            <summary>OUTPUT Pipe Type</summary>
        </member>
        <member name="P:Pipes.Plumbing.Junction.InputPipes">
            <summary>The names of the INPUT pipes</summary>
        </member>
        <member name="P:Pipes.Plumbing.Junction.OutputPipes">
            <summary>The names of the OUTPUT pipes</summary>
        </member>
        <member name="P:Pipes.Plumbing.Junction.PipesMaps">
            <summary>The map of pipe names to their pipes</summary>
        </member>
        <member name="P:Pipes.Plumbing.Junction.PipeTypesMap">
            <summary>The map of pipe names to their types</summary>
        </member>
        <member name="T:Pipes.Plumbing.JunctionMediator">
            <summary>
            Junction Mediator.
            A base class for handling the Pipe Junction in an IPipeAware 
            Core.
            </summary>
        </member>
        <member name="M:Pipes.Plumbing.JunctionMediator.#ctor(System.String,System.Object)">
            <summary>
            Constructor.
            </summary>
            <param name="mediatorName"></param>
            <param name="viewComponent"></param>
        </member>
        <member name="M:Pipes.Plumbing.JunctionMediator.ListNotificationInterests">
            <summary>
            List Notification Interests.
            </summary>
            <remarks>
                <para>
                    Returns the notification interests for this base class.
                    Override in subclass and call <c>super.listNotificationInterests</c>
                    to get this list, then add any sublcass interests to 
                    the array before returning.
                </para>
            </remarks>
            <returns>string array of notifications</returns>
        </member>
        <member name="M:Pipes.Plumbing.JunctionMediator.HandleNotification(PureMVC.Interfaces.INotification)">
            <summary>
            Handle Notification.
            </summary>
            <remarks>
                <para>
                    This provides the handling for common junction activities. It 
                    accepts input and output pipes in response to <c>IPipeAware</c>
                    interface calls.
                </para>
                <para>
                    Override in subclass, and call <c>super.handleNotification</c>
                    if none of the subclass-specific notification names are matched.
                </para>
            </remarks>
            <param name="notification"></param>
        </member>
        <member name="M:Pipes.Plumbing.JunctionMediator.HandlePipeMessage(Pipes.Interfaces.IPipeMessage)">
            <summary>
            Handle incoming pipe messages.
            <para>
                Override in subclass and handle messages appropriately for the module.
            </para>
            </summary>
            <param name="message"></param>
        </member>
        <member name="P:Pipes.Plumbing.JunctionMediator.Junction">
            <summary>
            The Junction for this Module.
            </summary>
        </member>
        <member name="F:Pipes.Plumbing.JunctionMediator.ACCEPT_INPUT_PIPE">
            <summary>Accept input pipe notification name constant.</summary>
        </member>
        <member name="F:Pipes.Plumbing.JunctionMediator.ACCEPT_OUTPUT_PIPE">
            <summary>Accept output pipe notification name constant.</summary>
        </member>
        <member name="T:Pipes.Plumbing.Pipe">
            <summary>
            Pipe.
            </summary>
            <remarks>
                <para>
                    This is the most basic <c>IPipeFitting</c>,
                    simply allowing the connection of an output
                    fitting and writing of a message to that output.
                </para>
            </remarks>
        </member>
        <member name="M:Pipes.Plumbing.Pipe.#ctor(Pipes.Interfaces.IPipeFitting)">
            <summary>
            Constructor with an optional output <c>Pipe</c>
            </summary>
            <param name="output"></param>
        </member>
        <member name="M:Pipes.Plumbing.Pipe.Connect(Pipes.Interfaces.IPipeFitting)">
            <summary>
            Connect another PipeFitting to the output.
            </summary>
            <remarks>
                <para>
                    PipeFittings connect to and write to other 
                    PipeFittings in a one-way, syncrhonous chain.
                </para>
            </remarks>
            <param name="output">Pipefitting to connect</param>
            <returns>Boolean true if no other fitting was already connected.</returns>
        </member>
        <member name="M:Pipes.Plumbing.Pipe.Disconnect">
            <summary>
            Disconnect the Pipe Fitting connected to the output.
            </summary>
            <remarks>
                <para>
                    This disconnects the output fitting, returning a 
                    reference to it. If you were splicing another fitting
                    into a pipeline, you need to keep (at least briefly) 
                    a reference to both sides of the pipeline in order to 
                    connect them to the input and output of whatever 
                    fiting that you're splicing in.
                </para>
            </remarks>
            <returns>IPipeFitting the now disconnected output fitting</returns>
        </member>
        <member name="M:Pipes.Plumbing.Pipe.Write(Pipes.Interfaces.IPipeMessage)">
            <summary>
            Write the message to the connected output.
            </summary>
            <param name="message">the message to writ</param>
            <returns>Boolean whether any connected downpipe outputs failed</returns>
        </member>
        <member name="P:Pipes.Plumbing.Pipe.Output">
            <summary>Output pipe</summary>
        </member>
        <member name="T:Pipes.Plumbing.PipeListener">
            <summary>
            Pipe Listener.
            </summary>
            <remarks>
                <para>
                    Allows a class that does not implement <c>IPipeFitting</c> to
                    be the final recipient of the messages in a pipeline.
                </para>
            </remarks>
        </member>
        <member name="M:Pipes.Plumbing.PipeListener.#ctor(System.Object,System.Action{Pipes.Interfaces.IPipeMessage})">
            <summary>Constructor - Receives context object and callback method</summary>
        </member>
        <member name="M:Pipes.Plumbing.PipeListener.Connect(Pipes.Interfaces.IPipeFitting)">
            <summary>
            Can't connect anything beyond this.
            </summary>
            <param name="output"></param>
            <returns></returns>
        </member>
        <member name="M:Pipes.Plumbing.PipeListener.Disconnect">
            <summary>
            Can't disconnect since you can't connect, either.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pipes.Plumbing.PipeListener.Write(Pipes.Interfaces.IPipeMessage)">
            <summary>Write the message to the listener</summary>
        </member>
        <member name="P:Pipes.Plumbing.PipeListener.Context">
            <summary>Context of the Object</summary>
        </member>
        <member name="P:Pipes.Plumbing.PipeListener.Listener">
            <summary>Callback method</summary>
        </member>
        <member name="T:Pipes.Plumbing.Queue">
            <summary>
            Pipe Queue.
            </summary>
            <remarks>
                <para>
                    The Queue always stores inbound messages until you send it
                    a FLUSH control message, at which point it writes its buffer 
                    to the output pipe fitting. The Queue can be sent a SORT 
                    control message to go into sort-by-priority mode or a FIFO 
                    control message to cancel sort mode and return the
                    default mode of operation, FIFO.
                </para>
                <para>
                    NOTE: There can effectively be only one Queue on a given 
                    pipeline, since the first Queue acts on any queue control 
                    message. Multiple queues in one pipeline are of dubious 
                    use, and so having to name them would make their operation 
                    more complex than need be.
                </para>
            </remarks>
        </member>
        <member name="M:Pipes.Plumbing.Queue.#ctor(Pipes.Interfaces.IPipeFitting)">
            <summary>
            Queue constructor
            </summary>
            <param name="output">Optional output pipe</param>
        </member>
        <member name="M:Pipes.Plumbing.Queue.Write(Pipes.Interfaces.IPipeMessage)">
            <summary>
            Handle the incoming message.
            </summary>
            <remarks>
                <para>
                    Normal messages are enqueued.
                </para>
                <para>
                    The FLUSH message type tells the Queue to write all 
                    stored messages to the ouptut PipeFitting, then 
                    return to normal enqueing operation.
                </para>
                <para>
                    The SORT message type tells the Queue to sort all 
                    <I>subsequent</I> incoming messages by priority. If there
                    are unflushed messages in the queue, they will not be
                    sorted unless a new message is sent before the next FLUSH.
                    Sorting-by-priority behavior continues even after a FLUSH, 
                    and can be turned off by sending a FIFO message, which is 
                    the default behavior for enqueue/dequeue.
                </para>
            </remarks>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Pipes.Plumbing.Queue.Store(Pipes.Interfaces.IPipeMessage)">
            <summary>
            Store a message.
            </summary>
            <param name="message">the IPipeMessage to enqueue.</param>
        </member>
        <member name="M:Pipes.Plumbing.Queue.Flush">
            <summary>
            Flush the queue.
            </summary>
            <remarks>
                <para>
                    NOTE: This empties the queue.
                </para>
            </remarks>
            <returns>true if all messages written successfully.</returns>
        </member>
        <member name="P:Pipes.Plumbing.Queue.Messages">
            <summary>List to store messages</summary>
        </member>
        <member name="P:Pipes.Plumbing.Queue.Mode">
            <summary>Get or Set the mode.</summary>
        </member>
        <member name="T:Pipes.Plumbing.TeeMerge">
            <summary>
             Merging Pipe Tee.
            </summary>
            <remarks>
                <para>
                    Writes the messages from multiple input pipelines into
                    a single output pipe fitting.
                </para>
            </remarks>
        </member>
        <member name="M:Pipes.Plumbing.TeeMerge.#ctor(Pipes.Interfaces.IPipeFitting,Pipes.Interfaces.IPipeFitting)">
            <summary>
            Constructor.
            </summary>
            <remarks>
                <para>
                    Create the TeeMerge and the two optional constructor inputs.
                    This is the most common configuration, though you can connect
                    as many inputs as necessary by calling <c>connectInput</c>
                    repeatedly.
                </para>
                <para>
                    Connect the single output fitting normally by calling the
                    <c>connect</c> method, as you would with any other IPipeFitting.
                </para>
            </remarks>
            <param name="input1">Input pipe</param>
            <param name="input2">Input pipe</param>
        </member>
        <member name="M:Pipes.Plumbing.TeeMerge.ConnectInput(Pipes.Interfaces.IPipeFitting)">
            <summary>
            Connect an input IPipeFitting.
            </summary>
            <remarks>
                <para>
                    NOTE: You can connect as many inputs as you want
                    by calling this method repeatedly.
                </para>
            </remarks>
            <param name="input">the IPipeFitting to connect for input.</param>
            <returns>true if pipe connected successfully</returns>
        </member>
        <member name="T:Pipes.Plumbing.TeeSplit">
            <summary>
            Splitting Pipe Tee.
            </summary>
            <remarks>
                <para>
                    Writes input messages to multiple output pipe fittings.
                </para>
            </remarks>
        </member>
        <member name="M:Pipes.Plumbing.TeeSplit.#ctor(Pipes.Interfaces.IPipeFitting,Pipes.Interfaces.IPipeFitting)">
            <summary>
            Constructor.
            </summary>
            <remarks>
                <para>
                    Create the TeeSplit and connect the up two optional outputs.
                    This is the most common configuration, though you can connect
                    as many outputs as necessary by calling <c>connect</c>.
                </para>
            </remarks>
            <param name="output1">Output pipe</param>
            <param name="output2">Output pipe</param>
        </member>
        <member name="M:Pipes.Plumbing.TeeSplit.Connect(Pipes.Interfaces.IPipeFitting)">
            <summary>
            Connect the output IPipeFitting.
            </summary>
            <remarks>
                <para>
                    NOTE: You can connect as many outputs as you want
                    by calling this method repeatedly.
                </para>
            </remarks>
            <param name="output">the IPipeFitting to connect for output.</param>
            <returns>true if connect was successful</returns>
        </member>
        <member name="M:Pipes.Plumbing.TeeSplit.Disconnect">
            <summary>
            Disconnect the most recently connected output fitting. (LIFO)
            </summary>
            <remarks>
                <para>
                    To disconnect all outputs, you must call this 
                    method repeatedly untill it returns null.
                </para>
            </remarks>
            <returns>the disconnected IPipeFitting to connect for output.</returns>
        </member>
        <member name="M:Pipes.Plumbing.TeeSplit.DisconnectFitting(Pipes.Interfaces.IPipeFitting)">
            <summary>
            Disconnect a given output fitting.
            </summary>
            <remarks>
                <para>
                    If the fitting passed in is connected
                    as an output of this <c>TeeSplit</c>, then
                    it is disconnected and the reference returned.
                </para>
                <para>
                     If the fitting passed in is not connected as an 
                     output of this <c>TeeSplit</c>, then <c>null</c>
                     is returned.
                </para>
            </remarks>
            <param name="target">Pipe to disconnect</param>
            <returns>the disconnected IPipeFitting to connect for output.</returns>
        </member>
        <member name="M:Pipes.Plumbing.TeeSplit.Write(Pipes.Interfaces.IPipeMessage)">
            <summary>
            Write the message to all connected outputs.
            </summary>
            <remarks>
                <para>
                    Returns false if any output returns false,
                    but all outputs are written to regardless.
                </para>
            </remarks>
            <param name="message">the message to write</param>
            <returns>whether any connected outputs failed</returns>
        </member>
        <member name="F:Pipes.Plumbing.TeeSplit.outputs">
            <summary>Output pipes</summary>
        </member>
    </members>
</doc>
